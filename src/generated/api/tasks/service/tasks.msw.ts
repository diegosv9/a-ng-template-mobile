/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Task API
 * API for managing tasks.
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  TaskDTO
} from '../model';


export const getGetTasksResponseMock = (): TaskDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), completed: faker.datatype.boolean(), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getPostTasksResponseMock = (overrideResponse: Partial< TaskDTO > = {}): TaskDTO => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), completed: faker.datatype.boolean(), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetTasksTaskIdResponseMock = (overrideResponse: Partial< TaskDTO > = {}): TaskDTO => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), completed: faker.datatype.boolean(), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getPutTasksTaskIdResponseMock = (overrideResponse: Partial< TaskDTO > = {}): TaskDTO => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), completed: faker.datatype.boolean(), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})


export const getGetTasksMockHandler = (overrideResponse?: TaskDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TaskDTO[]> | TaskDTO[])) => {
  return http.get('*/tasks', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetTasksResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostTasksMockHandler = (overrideResponse?: TaskDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TaskDTO> | TaskDTO)) => {
  return http.post('*/tasks', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostTasksResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTasksTaskIdMockHandler = (overrideResponse?: TaskDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TaskDTO> | TaskDTO)) => {
  return http.get('*/tasks/:taskId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetTasksTaskIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutTasksTaskIdMockHandler = (overrideResponse?: TaskDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<TaskDTO> | TaskDTO)) => {
  return http.put('*/tasks/:taskId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPutTasksTaskIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteTasksTaskIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/tasks/:taskId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}
export const getTaskAPIMock = () => [
  getGetTasksMockHandler(),
  getPostTasksMockHandler(),
  getGetTasksTaskIdMockHandler(),
  getPutTasksTaskIdMockHandler(),
  getDeleteTasksTaskIdMockHandler()]
