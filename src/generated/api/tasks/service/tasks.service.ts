/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Task API
 * API for managing tasks.
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  NewTaskDTO,
  TaskDTO,
  UpdateTaskDTO
} from '../model';



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class TaskAPIService {
  constructor(
    private http: HttpClient,
  ) {}/**
 * @summary Get all tasks
 */
 getTasks<TData = TaskDTO[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getTasks<TData = TaskDTO[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getTasks<TData = TaskDTO[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getTasks<TData = TaskDTO[]>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `$tasks-client$/tasks`,options
    );
  }

/**
 * @summary Create a new task
 */
 postTasks<TData = TaskDTO>(
    newTaskDTO: NewTaskDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    postTasks<TData = TaskDTO>(
    newTaskDTO: NewTaskDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    postTasks<TData = TaskDTO>(
    newTaskDTO: NewTaskDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;postTasks<TData = TaskDTO>(
    newTaskDTO: NewTaskDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `$tasks-client$/tasks`,
      newTaskDTO,options
    );
  }

/**
 * @summary Get a task by ID
 */
 getTasksTaskId<TData = TaskDTO>(
    taskId: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getTasksTaskId<TData = TaskDTO>(
    taskId: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getTasksTaskId<TData = TaskDTO>(
    taskId: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getTasksTaskId<TData = TaskDTO>(
    taskId: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `$tasks-client$/tasks/${taskId}`,options
    );
  }

/**
 * @summary Update a task by ID
 */
 putTasksTaskId<TData = TaskDTO>(
    taskId: string,
    updateTaskDTO: UpdateTaskDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    putTasksTaskId<TData = TaskDTO>(
    taskId: string,
    updateTaskDTO: UpdateTaskDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    putTasksTaskId<TData = TaskDTO>(
    taskId: string,
    updateTaskDTO: UpdateTaskDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;putTasksTaskId<TData = TaskDTO>(
    taskId: string,
    updateTaskDTO: UpdateTaskDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `$tasks-client$/tasks/${taskId}`,
      updateTaskDTO,options
    );
  }

/**
 * @summary Delete a task by ID
 */
 deleteTasksTaskId<TData = void>(
    taskId: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    deleteTasksTaskId<TData = void>(
    taskId: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    deleteTasksTaskId<TData = void>(
    taskId: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;deleteTasksTaskId<TData = void>(
    taskId: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `$tasks-client$/tasks/${taskId}`,options
    );
  }

};

export type GetTasksClientResult = NonNullable<TaskDTO[]>
export type PostTasksClientResult = NonNullable<TaskDTO>
export type GetTasksTaskIdClientResult = NonNullable<TaskDTO>
export type PutTasksTaskIdClientResult = NonNullable<TaskDTO>
export type DeleteTasksTaskIdClientResult = NonNullable<void>
